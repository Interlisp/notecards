Notes on Chapter 19#.<form>At read time, reads <form>, evaluates it, and returns the value as the thing read.  This is taken from CommonLoops.($C name)is there only to make forward references to classes in a file work.  Users shouldn't ever type in this form.  They should use ($ name).#.($& ...)is how instances print out (when not prettyprinted).  All that really matters is that read in correctly.  If the object has a UID, it prints out as #.($& className uid).  If not, it prints out as #.($& className (nnn . mmmm)) where nnn and mmmm are ugly numbers.  This works because ($& ...) is a NLambda function that does the right thing.  Again, users should never need to type in such a form.  They only need to know about ($& ...) so they can make sense of what Loops prints out.Under ($ name) on the first page is the statement "...the value is returned to the exec, a DEFINST listing..." is misleading.  The value returned is the instance.  If you happen to have SYSPRETTYFLG set to T, this might be printed out as #.(DEFINST ...). There is also the statement "If name is a class, the functions returns the class name."  Also false.  It returns the class, which happens to print out as #.($ name).ObjectDontPPFlagis used internally by the system when prettyprinting objects to avoid recursive prettyprinting (see the comments in the chapter about infinite loops when printing objects).ObjectAlwaysPPFlagprevents ObjectDontPPFlag from having any effect.  Personally, I can't see any use for this, and don't I suspect it shouldn't be documented.SYSPRETTYFLGdoes indeed effect the way that instances and classes are printed at the top level.  If ObjectDontPPFlag = NIL, objects get prettyprinted at the top level if SYSPRETTYFLG is T.  Note that ObjectAlwaysPPFlag = T overrides SYSPRETTYFLG = NIL, and ObjectDontPPFlag = T overrides SYSPRETTYFLG = T.(_ self PrintOn file)returns a form sutible for DEFPRINT.  That's why it returns the rather bizzare list ("#." . ($ ...)).(_ self PP file)does set ObjectDontPPFlag to T, which works as long as nobody has set ObjectAlwaysPPFlag to T.ExplicitFnActiveValueThis class of active values is around to mimic the old-style Loops activevalues that had a localState, getFn, and putFn.  For some specialized applications, people might want a different class of active value to be used for this purpose.  That's why the variable DefaultActiveValueClassName is around.AnnotatedValues and ActiveValuesAnnotatedValues are a special datatype that is used to implement active values.  They "wrap" instances of one of the active value classes.  The Loops class AnnotatedValue is designed to give this new datatype some of the characteristics of Loops objects. (_ (fetch annotatedValue of av) AVPrintSource)gets sent to wrapped active value object (not the annotated value) to determine how the annotated value av will print.  This is different from how the wrapped active value object prints.  Try typing the following forms to the exec:(LET ((y ($A foo bar baz)))	(PRINT (TYPENAME y))	(PRINT y)	(PRINT (fetch annotatedValue of y))	NIL) (HasUID? obj)returns NIL if the object obj doesn't have a UID.  It generates an error if obj is not an object.  Try (HasUID? (_ ($ Object) New)).(UIDP x)does return the UID count number, but that is not important.  The important thing is that it is NIL if x is not a UID, and true (= not NIL) if x is a UID. Things that don't need to be explicitly documentedVARS:LoopsReadMacroCharFNS:PPCPrettyPrintClasssPrintClassPrttyClassesPPObjPrettyPrintInstancesPrintInstancePrettyPrintLoopsFormPrintDefInstancesPrettyPrintInstancePrttyInstancesPrintAnnotatedValue